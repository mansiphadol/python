#include <iostream>
#include <string>
#include <cmath>

namespace AI {
    class TicTacToeAI {
    public:
        void play() {
            std::string a[9];
            int inta[9];
            int computingScores[9] = {0};
            int i, count1 = 0, count2 = 0, count0 = 0;
            
            std::cout << "Enter input data: ";
            for (i = 0; i < 9; i++) {
                std::cin >> a[i];
            }

            std::cout << "Tictactoe vector [";
            for (i = 0; i < 9; i++) {
                if (a[i] == "X") {
                    a[i] = "1";
                } else if (a[i] == "O") {
                    a[i] = "2";
                }
                std::cout << " " << a[i];
            }
            std::cout << "]\n";

            for (i = 0; i < 9; i++) {
                inta[i] = std::stoi(a[i]);
                if (inta[i] == 1) {
                    count1++;
                } else if (inta[i] == 2) {
                    count2++;
                } else {
                    count0++;
                }
            }

            if (std::abs(count1 - count2) <= 1) {
                std::cout << "Valid!\n";
            } else {
                std::cout << "Invalid!!\n";
                exit(0);
            }

            // double index = 0;
            // for (int j = 0; j < 9; j++) {
            //     index += (inta[j] * std::pow(3, 8 - j));
            // }

            // std::cout << "Index is: " << index << "\n";
            
            std::cout << "Possible Moves = \n";
            if (count1 <= count2) {
                std::cout << "Predicting for X turn\n";
                predictTurn(1, inta, computingScores);
            } else {
                std::cout << "Predicting O turn\n";
                predictTurn(2, inta, computingScores);
            }

            // Output computing scores
            std::cout << "Computing Scores for each position: ";
            for (i = 0; i < 9; i++) {
                if (inta[i] == 0) {
                    std::cout << "Position " << (i + 1) << ": " << computingScores[i] << "\n";
                }
            }
        }

    private:
        static void predictTurn(int player, int inta[], int computingScores[]) {
            int i, rowCounter, colCounter, diagCounter;
            for (i = 0; i < 9; i++) {
                if (inta[i] == 0) { // 0 means move is possible
                    int copyInta[9]; // creating copy of the current state
                    std::copy(inta, inta + 9, copyInta);
                    copyInta[i] = player; // where there is 0 put X
                    printMatrix(copyInta);

                    rowCounter = colCounter = diagCounter = 0;
                    for (int j = 0; j < 3; j++) {
                        if (checkRow(copyInta, j)) {
                            rowCounter++; // inc row count if win 
                        }
                    }

                    for (int j = 0; j < 3; j++) {
                        if (checkColumn(copyInta, j)) {
                            colCounter++;
                        }
                    }

                    if (checkDiagonal(copyInta)) {
                        diagCounter++;
                    }

                    computingScores[i] = rowCounter + colCounter + diagCounter;
                }
            }
        }

        static void printMatrix(int array[]) {
            for (int i = 0; i < 9; i++) {
                if (array[i] == 1) {
                    std::cout << "X ";
                } else if (array[i] == 2) {
                    std::cout << "O ";
                } else {
                    std::cout << "0 ";
                }
                if ((i + 1) % 3 == 0) { // adding new line character at end of each row
                    std::cout << "\n"; 
                }
            }
            std::cout << "\n";
        }

        static bool checkRow(int array[], int row) {
            int start = row * 3;
            int value = array[start];
            if (value == 0) { // return flase when value is 0 as no win 
                return false;
            }

            for (int i = start + 1; i < start + 3; i++) {
                if (array[i] != value) {
                    return false; // if value is not similar throughout the row then return false
                }
            }

            return true; // else return true
        } 

        static bool checkColumn(int array[], int col) {
            int start = col;
            int value = array[start];
            if (value == 0) {
                return false;
            }

            for (int i = start + 3; i < start + 7; i += 3) {
                if (array[i] != value) {
                    return false;
                }
            }

            return true;
        }

        static bool checkDiagonal(int array[]) {
            return (array[0] != 0 && array[0] == array[4] && array[0] == array[8]) ||
                   (array[2] != 0 && array[2] == array[4] && array[2] == array[6]);
        }
    };
} // namespace AI

int main() {
    AI::TicTacToeAI game;
    game.play();

    return 0;
}
